// Hier voegen we code toe die bijhoudt welke veranderingen er worden gedaan

// Type voor het bijhouden van een verbruiksactie voor undo-functionaliteit
export type VerbruiksActie = {
  itemId: number;
  vorigeStatus: PoederDoos;
  timestamp: number;
  type: string; // 'kwart', 'half', 'driekwart', 'leeg' of 'custom'
  hoeveelheid?: number; // alleen voor custom type
};

// Geschiedenis van acties bijhouden (maximaal 10)
let verbruiksGeschiedenis: VerbruiksActie[] = [];
const MAX_GESCHIEDENIS = 10;

// Getter voor de geschiedenis
export const getVerbruiksGeschiedenis = () => verbruiksGeschiedenis;

// Helper functie om een actie toe te voegen aan de geschiedenis
const voegActieToeAanGeschiedenis = (actie: VerbruiksActie) => {
  verbruiksGeschiedenis = [actie, ...verbruiksGeschiedenis.slice(0, MAX_GESCHIEDENIS - 1)];
  saveToLocalStorage();
};

// Functie om de laatste verbruiksactie ongedaan te maken
export const undoLaatsteVerbruik = (): PoederDoos | null => {
  if (verbruiksGeschiedenis.length === 0) return null;
  
  // Haal de laatste actie uit de geschiedenis
  const laatsteActie = verbruiksGeschiedenis[0];
  verbruiksGeschiedenis = verbruiksGeschiedenis.slice(1);
  
  // Zoek het item in de huidige voorraad
  const itemIndex = voorraadData.findIndex(item => item.id === laatsteActie.itemId);
  if (itemIndex === -1) return null;
  
  // Herstel de vorige status
  voorraadData = [
    ...voorraadData.slice(0, itemIndex),
    laatsteActie.vorigeStatus,
    ...voorraadData.slice(itemIndex + 1)
  ];
  
  saveToLocalStorage();
  return laatsteActie.vorigeStatus;
};

// Update de verbruikVoorraad functie om de geschiedenis bij te houden
export const verbruikVoorraad = (id: number, hoeveeheid: string): PoederDoos | null => {
  const itemIndex = voorraadData.findIndex(item => item.id === id);
  if (itemIndex === -1) return null;
  
  const item = voorraadData[itemIndex];
  
  // Sla de originele status op voor undo
  const origineleStatus: PoederDoos = { ...item };
  
  // Bereken nieuwe waarden op basis van de geselecteerde hoeveeheid
  let nieuweAantal = item.aantal_dozen;
  let nieuweGebruikt = item.aantal_gebruikt;
  
  switch(hoeveeheid) {
    case 'kwart':
      if (item.aantal_dozen > 0) {
        if (item.aantal_gebruikt === 0) {
          nieuweGebruikt = 0.25;
        } else {
          nieuweGebruikt = Math.min(1, item.aantal_gebruikt + 0.25);
          // Als we 100% hebben bereikt, verlaag het aantal en reset gebruikt
          if (nieuweGebruikt >= 1) {
            nieuweAantal = Math.max(0, item.aantal_dozen - 1);
            nieuweGebruikt = 0;
          }
        }
      }
      break;
    case 'half':
      if (item.aantal_dozen > 0) {
        if (item.aantal_gebruikt === 0) {
          nieuweGebruikt = 0.5;
        } else {
          nieuweGebruikt = Math.min(1, item.aantal_gebruikt + 0.5);
          // Als we 100% hebben bereikt, verlaag het aantal en reset gebruikt
          if (nieuweGebruikt >= 1) {
            nieuweAantal = Math.max(0, item.aantal_dozen - 1);
            nieuweGebruikt = 0;
          }
        }
      }
      break;
    case 'driekwart':
      if (item.aantal_dozen > 0) {
        if (item.aantal_gebruikt === 0) {
          nieuweGebruikt = 0.75;
        } else {
          nieuweGebruikt = Math.min(1, item.aantal_gebruikt + 0.75);
          // Als we 100% hebben bereikt, verlaag het aantal en reset gebruikt
          if (nieuweGebruikt >= 1) {
            nieuweAantal = Math.max(0, item.aantal_dozen - 1);
            nieuweGebruikt = nieuweGebruikt - 1;
          }
        }
      }
      break;
    case 'leeg':
      if (item.aantal_dozen > 0) {
        nieuweAantal = Math.max(0, item.aantal_dozen - 1);
        nieuweGebruikt = 0;
      }
      break;
    default:
      // Doe niets als de hoeveeheid niet bekend is
      break;
  }
  
  // Update het item
  const updatedItem: PoederDoos = {
    ...item,
    aantal_dozen: nieuweAantal,
    aantal_gebruikt: nieuweGebruikt
  };
  
  // Update de array
  voorraadData = [
    ...voorraadData.slice(0, itemIndex),
    updatedItem,
    ...voorraadData.slice(itemIndex + 1)
  ];
  
  // Voeg de actie toe aan de geschiedenis
  voegActieToeAanGeschiedenis({
    itemId: id,
    vorigeStatus: origineleStatus,
    timestamp: Date.now(),
    type: hoeveeheid,
  });
  
  saveToLocalStorage();
  return updatedItem;
};

// Update ook de custom hoeveelheid functie
export const verbruikCustomHoeveelheid = (id: number, hoeveelheid: number): PoederDoos | null => {
  const itemIndex = voorraadData.findIndex(item => item.id === id);
  if (itemIndex === -1) return null;
  
  const item = voorraadData[itemIndex];
  
  // Sla de originele status op voor undo
  const origineleStatus: PoederDoos = { ...item };
  
  // Zorg ervoor dat we niet meer dan het beschikbare aantal verbruiken
  const maxVerbruik = item.aantal_dozen + (1 - item.aantal_gebruikt);
  const verbruik = Math.min(maxVerbruik, hoeveelheid);
  
  // Bereken nieuwe waarden
  let nieuweAantal = item.aantal_dozen;
  let nieuweGebruikt = item.aantal_gebruikt;
  
  if (verbruik >= 1) {
    // Hele dozen verbruiken
    const heleDozijn = Math.floor(verbruik);
    nieuweAantal = Math.max(0, item.aantal_dozen - heleDozijn);
    
    // Eventueel resterende fractie
    const fractie = verbruik - heleDozijn;
    if (fractie > 0) {
      nieuweGebruikt = fractie;
    }
  } else {
    // Alleen fractie verbruiken
    nieuweGebruikt = Math.min(1, item.aantal_gebruikt + verbruik);
    if (nieuweGebruikt >= 1) {
      nieuweAantal = Math.max(0, item.aantal_dozen - 1);
      nieuweGebruikt = 0;
    }
  }
  
  // Update het item
  const updatedItem: PoederDoos = {
    ...item,
    aantal_dozen: nieuweAantal,
    aantal_gebruikt: nieuweGebruikt
  };
  
  // Update de array
  voorraadData = [
    ...voorraadData.slice(0, itemIndex),
    updatedItem,
    ...voorraadData.slice(itemIndex + 1)
  ];
  
  // Voeg de actie toe aan de geschiedenis
  voegActieToeAanGeschiedenis({
    itemId: id,
    vorigeStatus: origineleStatus,
    timestamp: Date.now(),
    type: 'custom',
    hoeveelheid: hoeveelheid,
  });
  
  saveToLocalStorage();
  return updatedItem;
};

// Update de saveToLocalStorage functie om ook geschiedenis op te slaan
const saveToLocalStorage = () => {
  if (typeof window !== 'undefined') {
    try {
      localStorage.setItem('poederdozen', JSON.stringify(voorraadData));
      localStorage.setItem('poederdozen_geschiedenis', JSON.stringify(verbruiksGeschiedenis));
    } catch (error) {
      console.error('Fout bij opslaan naar localStorage:', error);
    }
  }
};

// Update de loadFromLocalStorage functie om ook geschiedenis te laden
export const loadFromLocalStorage = () => {
  if (typeof window !== 'undefined') {
    try {
      const storedData = localStorage.getItem('poederdozen');
      if (storedData) {
        voorraadData = JSON.parse(storedData);
      }
      
      const storedGeschiedenis = localStorage.getItem('poederdozen_geschiedenis');
      if (storedGeschiedenis) {
        verbruiksGeschiedenis = JSON.parse(storedGeschiedenis);
      }
    } catch (error) {
      console.error('Fout bij laden uit localStorage:', error);
    }
  }
};
